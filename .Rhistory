source('C:/Users/Rahul/Desktop/kings_case_comp/simplemodel.R', echo=TRUE)
foul_trouble <- function(game_clock, period, fouls) {
game_clock_as_int <- (as.numeric(as.POSIXct(game_clock, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
time_remaining <- (4-period) * 12 + game_clock_as_int
foul_trouble_data <- read.csv('./foul_trouble_data.csv')
foul_trouble_model <- lm(X0.1 ~ X45 + X1, data=foul_trouble_data)
intercept <- foul_trouble_model$coefficients[1]
time_coefficient <- foul_trouble_model$coefficients[2]
foul_coefficient <- foul_trouble_model$coefficients[3]
val <- intercept + (time_coefficient * time_remaining) + (foul_coefficient * fouls)
min_val <- intercept
max_val <- intercept + (min_coefficient * 48) + (foul_coefficient * 5)
return ((val - min_val) / (max_val - min_val))
}
foul_trouble <- function(game_clock, period, fouls) {
game_clock_as_int <- (as.numeric(as.POSIXct(game_clock, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
time_remaining <- (4-period) * 12 + game_clock_as_int
foul_trouble_data <- read.csv('./foul_trouble_data.csv')
foul_trouble_model <- lm(X0.1 ~ X45 + X1, data=foul_trouble_data)
intercept <- foul_trouble_model$coefficients[1]
time_coefficient <- foul_trouble_model$coefficients[2]
foul_coefficient <- foul_trouble_model$coefficients[3]
val <- intercept + (time_coefficient * time_remaining) + (foul_coefficient * fouls)
min_val <- intercept
max_val <- intercept + (min_coefficient * 48) + (foul_coefficient * 5)
return ((val - min_val) / (max_val - min_val))
}
foul_trouble('0:00', 4, 0)
foul_trouble <- function(game_clock, period, fouls) {
game_clock_as_int <- (as.numeric(as.POSIXct(game_clock, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
time_remaining <- (4-period) * 12 + game_clock_as_int
foul_trouble_data <- read.csv('./foul_trouble_data.csv')
foul_trouble_model <- lm(X0.1 ~ X45 + X1, data=foul_trouble_data)
intercept <- foul_trouble_model$coefficients[1]
time_coefficient <- foul_trouble_model$coefficients[2]
foul_coefficient <- foul_trouble_model$coefficients[3]
val <- intercept + (time_coefficient * time_remaining) + (foul_coefficient * fouls)
min_val <- intercept
max_val <- intercept + (time_coefficient * 48) + (foul_coefficient * 5)
return ((val - min_val) / (max_val - min_val))
}
foul_trouble('0:00', 4, 0)
foul_trouble('12:00', 1, 5)
foul_trouble('3:00', 2, 4)
#setwd('C:/Users/Rahul/Dev/School/kings_case_comp')
data <- read.csv('./data/pbp_info_2015-16.csv')
head(data)
# returns the confidence with which a player should be subbed out (0 to 1)
sub_out_player <- function(game_clock, period, fouls, player_skill, win_prob=.5){
foul_trouble <- foul_trouble(game_clock, period, fouls)
return (1)
}
#setwd('C:/Users/Rahul/Dev/School/kings_case_comp')
data <- read.csv('./data/pbp_info_2015-16.csv')
foul_trouble('3:00', 2, 4)
foul_trouble('12:00', 1, 5)
raw_data <- read_archive('stringr')
tbl_html <- readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr')
tbl_html
---
#Reading the archive of stringr
library('stringer')
---
#Reading the archive of stringr
library('stringr')
tbl_html <- readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr')
---
#Reading the archive of stringr
download.packages("XML")
---
#Reading the archive of stringr
install.packages("XML")
tbl_html <- readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr')
tbl_html
library(XML)
tbl_html <- readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr')
tbl_html
read_archive <- function(archived_function){
readHTMLTable(paste0('http://cran.r-project.org/src/contrib/Archive/', archived_function))
}
raw_data <- read_archive('stringr')
table(raw_data)
raw_data
raw_data$name
raw_data$Name
data.table(raw_data)
as.data.table(raw_data)
as.data.frame(raw_data)
a <- as.data.frame(raw_data)
clean_archive <- function(raw_data){
raw_table <- as.data.frame(raw_data)
raw_table <- raw_table[c(1:4)]
raw_table
}
clean_archive <- function(raw_data){
raw_table <- as.data.frame(raw_data)
raw_table <- raw_table[c(1:4)]
raw_table
}
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
clean_data
clean_archive <- function(raw_data){
raw_table <- as.data.frame(raw_data)
raw_table <- raw_table[c(1:4)]
raw_table$name <- str_split(raw_table[1], pattern = '_')[1]
}
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
clean_data
clean_archive <- function(raw_data){
raw_table <- as.data.frame(raw_data)
raw_table <- raw_table[c(1:4)]
#raw_table$name <- str_split(raw_table[1], pattern = '_')[1]
}
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
clean_data
str_split(clean_data[1], pattern = '_')[1]
str_split(clean_data[1], pattern = '_')
clean_data[1]
clean_data
clean_data[2]
str_split(clean_data[2], pattern = '_')
?str_split
str_split(clean_data[2], pattern = '_')
raw_data
str_split(clean_data[2], pattern = '_')
?str_split
clean_data[3]
clean_data[4]
is_character(clean_data[4])
is.character(clean_data[4])
typeof(clean_data[2])
is.character(clean_data[4][3])
clean_data[4]
clean_data[4][3]
clean_data[4,3]
clean_data[4, 4]
type_of(clean_data[4])
type.of(clean_data[4])
type(clean_data[4])
typeof(clean_data[4])
unlist(clean_data[4])
typeof(unlist(clean_data[4]))
typeof(clean_data[2])
typeof(unlist(clean_data[2]))
unlist(clean_data[2])
clean_data
toString(unlist(clean_data[2]))
unlist(clean_data[2])
toString(unlist(clean_data[2]))[1]
toString(unlist(clean_data[2]))[2]
toString(unlist(clean_data[2]))
unlist(clean_data[2])
is.character(clean_data[4])
clean_data[4]
clean_data[4][3]
clean_data[4,3]
clean_data[4]
clean_data[4][2]
clean_data[4][2]
clean_data[4
clean_data[4]
clean_data[4]
clean_data[2]
clean_data[2][3]
clean_data[2,]
clean_data[4,]
clean_data[8,]
split_chars <- function(string){
list_of_strings <- NULL
for (i in 1:length(string)){
list_of_strings = list_of_strings + substr(string, i, i+1)
}
list_of_strings
}
split_chars("Go Bears")
length("Go Bears")
length('Go Bears')
?length
nchar('go bears')
split_chars <- function(string){
list_of_strings <- NULL
for (i in 1:nchar(string)){
list_of_strings = list_of_strings + substr(string, i, i+1)
}
list_of_strings
}
split_chars("Go Bears")
1:nchar('go bears')
for(i in 1:nchar('go bears'))
return i
for(i in 1:nchar('go bears'))
{
return i
}
for(i in 1:nchar('go bears')){
return i
}
for(i in 1:nchar('go bears')){
return(i)
}
for(i in 1:nchar('go bears')){
return(i)
}
}
for(i in 1:nchar('go bears')){
print(i)
}
for(e in 1:nchar('go bears')){
print(i)
}
'go bears'[2]
substr('go bears', 3)
substr('go bears', 3, 3)
substr('go bears', 1)
substr('go bears', 1, 3)
for(e in 1:nchar('go bears')){
print(i)
}
print(e)
for(e in 1:nchar('go bears')){
print(e)
}
split_chars <- function(string){
list_of_strings <- NULL
for(i in 1:nchar(string)){
list_of_strings = list_of_strings + substr(string, i, i+1)
}
list_of_strings
}
split_chars("fjlsd")
?substr
substr("fasdfasf", 2, 3)
i = 2
substr("fasdfasf", i, i+1)
substr("fasdfasf", i, i)
split_chars <- function(string){
list_of_strings <- NULL
for(i in 1:nchar(string)){
list_of_strings = list_of_strings + substr(string, i, i)
}
list_of_strings
}
split_chars("fjlsd")
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
list_of_strings = list_of_strings + substr(string, i, i)
}
list_of_strings
}
split_chars("fjlsd")
string <- "fsadfsa"
list_of_strings <- substr(string, 1, 1)
i in 2:nchar(string)
2:nchar(string)
listt <- 'f'
listt = listt + 'd'
append(listt, 'd')
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
append(list_of_strings,substr(string, i, i))
}
list_of_strings
}
split_chars("fjlsd")
split_chars("4fjlsd")
return(list_of_strings)
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
append(list_of_strings, substr(string, i, i))
}
return(list_of_strings)
}
split_chars("4fjlsd")
listt <- 'f'
i = 2
append(listt, substr(string, 2, 2))
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
list_of_strings <- append(list_of_strings, substr(string, i, i))
}
return(list_of_strings)
}
split_chars("4fjlsd")
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
list_of_strings <- append(list_of_strings, substr(string, i, i))
}
list_of_strings
}
split_chars("4fjlsd")
?freq
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(ggplot2)
library(dplyr)
char_freqs <- table(num_chars)

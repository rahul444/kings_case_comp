print(varianceD)
x0 = t(cbind(1, 50000, 0, 100))
x = cbind(rep(1, length(income)), income, education, women)
standard_error_squared = 7.846^2
varianceD = standard_error_squared * (t(x0) %*% solve(t(x) %*% x) %*% x0 + 1)
print(varianceD)
x0 = t(cbind(1, 5000, 0, 100))
x = cbind(rep(1, length(income)), income, education, women)
standard_error_squared = 7.846^2
varianceD = standard_error_squared * (t(x0) %*% solve(t(x) %*% x) %*% x0 + 1)
print(varianceD)
x0 = t(cbind(1, 50000, 0, 100))
x = cbind(rep(1, length(income)), income, education, women)
standard_error_squared = 7.846^2
varianceD = standard_error_squared * (t(x0) %*% solve(t(x) %*% x) %*% x0 + 1)
print(varianceD)
x0 = t(cbind(1, 50000, 0, 100))
x = cbind(rep(1, length(income)), income, education, women)
standard_error_squared = 7.846^2
varianceD = standard_error_squared * (t(x0) %*% solve(t(x) %*% x) %*% x0 + 1)
print(varianceD)
require(car)
prestige_model = lm(prestige ~ income + education + women, data = Prestige)
summary(prestige_model)
occupation = data.frame(income = 12000, education = 13, women = 50)
predict(model, occupation, interval="confidence", level=0.90)
predict(model, occupation, interval="prediction", level=0.90)
require(car)
prestige_model = lm(prestige ~ income + education + women, data = Prestige)
summary(prestige_model)
occupation = data.frame(income = 12000, education = 13, women = 50)
predict(prestige_model, occupation, interval="confidence", level=0.90)
predict(prestige_model, occupation, interval="prediction", level=0.90)
#Importing the data
require(faraway)
data("sat")
attach(sat)
pairs(sat, pch = 20, col = "darkorchid4", panel = panel.smooth, main = "SAT Data")
round(cor(sat), 2)
#All simple regression models
expend_model = lm(total ~ expend, data = sat)
summary(expend_model)
salary_model = lm(total ~ salary, data = sat)
summary(salary_model)
takers_model = lm(total ~ takers, data = sat)
summary(takers_model)
ratio_model = lm(total ~ ratio, data = sat)
summary(ratio_model)
expend_takers_model = lm(total ~ expend + takers, data = sat)
summary(expend_takers_model)
salary_takers_model = lm(total ~ salary + takers, data = sat)
summary(salary_takers_model)
ratio_takers_model = lm(total ~ ratio + takers, data = sat)
summary(ratio_takers_model)
expend_partial_model = lm(takers ~ expend, data = sat)
salary_partial_model = lm(takers ~ salary, data = sat)
ratio_partial_model = lm(takers ~ ratio, data = sat)
cor(expend_partial_model$residuals, takers_model$residuals)
cor(salary_partial_model$residuals, takers_model$residuals)
cor(ratio_partial_model$residuals, takers_model$residuals)
salary_ratio_takers_model = lm(total ~ salary + takers + ratio, data = sat)
summary(salary_ratio_takers_model)
install.packages("usingr")
install.packages("UsingR")
library(UsingR)
library(UsingR)
library(ggplot2)
library(UsingR)
data("normtemp")
lineup_14_15 = read.csv("~/Downloads/lineup_info_2014-15.csv")
lineup_14_15 = read.csv("~/Desktop/lineup_info_2014-15.csv")
lineup_15_16 = read.csv("~/Desktop/lineup_info_2015-16.csv")
lineup_16_17 = read.csv("~/Desktop/lineup_info_2016-17.csv")
pbp_14_15 = read.csv("~/Desktop/pbp_info_2014-15.csv")
pbp_15_16 = read.csv("~/Desktop/pbp_info_2015-16.csv")
pbp_16_17 = read.csv("~/Desktop/pbp_info_2016-17.csv")
lineup_14_15 = read.csv("~/Desktop/lineup_info_2014-15.csv")
lineup_15_16 = read.csv("~/Desktop/lineup_info_2015-16.csv")
lineup_16_17 = read.csv("~/Desktop/lineup_info_2016-17.csv")
pbp_14_15 = read.csv("~/Desktop/pbp_info_2014-15.csv")
pbp_15_16 = read.csv("~/Desktop/pbp_info_2015-16.csv")
pbp_16_17 = read.csv("~/Desktop/pbp_info_2016-17.csv")
pbp_14_15 = read.csv("~/Desktop/pbp_info_2014-15.csv")
pbp_15_16 = read.csv("~/Desktop/pbp_info_2015-16.csv")
pbp_16_17 = read.csv("~/Desktop/pbp_info_2016-17.csv")
head(pbp_14_15)
library(dplyr)
game_21401127 = pbp_14_15 %>% filter(game_id == 21401127)
View(game_21401127)
# Create a dummy dataset
set.seed(151)
n = 10
x = rnorm(n, 2, 2)
y = 2*x + rnorm(n, 0, 1)
df = data.frame(y, x)
print(df)
plot(x, y, data = df)
plot(x, y)
model = lm(y ~ x)
model
model$coefficients[1]
model$coefficients[2]
np_bootstrap <- function(data, sample_size) {
find_mean <- function(data_sample) {
resample <- data_sample %>% sample(replace = TRUE)
mean(resample)
}
sample_means <- replicate(1000, find_mean(data))
sd(sample_means)
}
np_bootstrap(df, 5000)
library(dplyr)
np_bootstrap(df, 5000)
np_bootstrap <- function(data, sample_size) {
find_mean <- function(data_sample) {
resample <- data_sample %>% sample(replace = TRUE)
mean(resample)
}
sample_means <- replicate(1000, find_mean(data))
sd(sample_means)
}
np_bootstrap(df, 5000)
np_bootstrap(x, 5000)
np_bootstrap(y, 5000)
library(dplyr)
my_data <- read.csv("~/Desktop/whales.csv")
N = 5000
bootJointDistribution function(df) {
bootIdx = sample(n, replace = TRUE)
bootSample = df[bootIdx, ]
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
set.seed(151)
beta.bootDist = replicate(N, bootJointDistribution(df))
head(beta.bootDist)
hist(beta - beta.bootDist, breaks = 30)
beta.bootDist = replicate(N, bootJointDistribution(df))
bootJointDistribution function(df) {
bootIdx = sample(n, replace = TRUE)
bootSample = df[bootIdx, ]
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
bootJointDistribution = function(df) {
bootIdx = sample(n, replace = TRUE)
bootSample = df[bootIdx, ]
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
set.seed(151)
beta.bootDist = replicate(N, bootJointDistribution(df))
head(beta.bootDist)
hist(beta - beta.bootDist, breaks = 30)
type(beta)
typeof(beta)
typeof(beta.bootDist)
model = lm(y ~ x, df)
beta = model$coefficients[2]
typeof(beta)
hist(beta - beta.bootDist, breaks = 30)
beta.bootDist.sorted = sort(beta.bootDist, decreasing = FALSE)
beta.bootDist.mean = mean(beta.bootDist)
beta.bootDist.sd = sd(beta.bootDist)
c(beta.bootDist.mean + qnorm(0.025)*beta.bootDist.sd, beta.bootDist.mean - qnorm(0.025)*beta.bootDist.sd)
N = 5000
bootJointDistributionStudentized = function(df, beta) {
bootIdx = sample(n, replace = TRUE)
bootSample = df[bootIdx, ]
bootModel = lm(y ~ x, data = bootSample)
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
bootBeta.se = coef(summary(bootModel))[2, 2]
return((beta - bootBeta) / bootBeta.se)
}
set.seed(151)
beta.bootDist.studentized = replicate(N, bootJointDistributionStudentized(df, beta))
head(beta.bootDist)
hist(beta - beta.bootDist, breaks = 30)
N = 5000
bootJointDistributionStudentized = function(df, beta) {
bootIdx = sample(n, replace = TRUE)
bootSample = df[bootIdx, ]
bootModel = lm(y ~ x, data = bootSample)
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
bootBeta.se = coef(summary(bootModel))[2, 2]
return((beta - bootBeta) / bootBeta.se)
}
set.seed(151)
beta.bootDist.studentized = replicate(N, bootJointDistributionStudentized(df, beta))
head(beta.bootDist)
hist(beta - beta.bootDist, breaks = 30)
N = 5000
bootJointDistributionStudentized = function(df, beta) {
bootIdx = sample(n, replace = TRUE)
bootSample = df[bootIdx, ]
bootModel = lm(y ~ x, data = bootSample)
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
bootBeta.se = coef(summary(bootModel))[2, 2]
return((beta - bootBeta) / bootBeta.se)
}
set.seed(151)
beta.bootDist.studentized = replicate(N, bootJointDistributionStudentized(df, beta))
head(beta.bootDist)
hist(beta.bootDist.studentized, breaks = 30)
residuals.ols = model.ols$residuals
bootResiduals = functon(residuals.ols, model.ols) {
bootIdx = sample(n, replace = TRUE)
bootSampleResiduals = residuals[bootIdx]
bootY = model.ols$fitted.values + bootSampleResiduals
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
set.seed(151)
beta.bootDist.residuals = replicate(N, bootResiduals(residuals.ols, model.ols, x))
hist(beta.bootDist.residuals, breaks = 30)
residuals.ols = model.ols$residuals
bootResiduals = functon(residuals.ols, model.ols, x) {
bootIdx = sample(n, replace = TRUE)
bootSampleResiduals = residuals[bootIdx]
bootY = model.ols$fitted.values + bootSampleResiduals
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
set.seed(151)
beta.bootDist.residuals = replicate(N, bootResiduals(residuals.ols, model.ols, x))
hist(beta.bootDist.residuals, breaks = 30)
bootResiduals = functon(residuals.ols, model.ols, x) {
bootIdx = sample(n, replace = TRUE)
bootSampleResiduals = residuals[bootIdx]
bootY = model.ols$fitted.values + bootSampleResiduals
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
residuals.ols = model.ols$residuals
residuals.ols = model$residuals
bootResiduals = functon(residuals.ols, model.ols, x) {
bootIdx = sample(n, replace = TRUE)
bootSampleResiduals = residuals.ols[bootIdx]
bootY = model.ols$fitted.values + bootSampleResiduals
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
bootResiduals = functon(residuals.ols, model.ols, x) {
bootIdx = sample(n, replace = TRUE)
bootSampleResiduals = residuals.ols[bootIdx]
bootY = model$fitted.values + bootSampleResiduals
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
bootResiduals = function(residuals.ols, model.ols, x) {
bootIdx = sample(n, replace = TRUE)
bootSampleResiduals = residuals.ols[bootIdx]
bootY = model.ols$fitted.values + bootSampleResiduals
bootBeta = lm(y ~ x, data = bootSample)$coefficients[2]
return(bootBeta)
}
set.seed(151)
beta.bootDist.residuals = replicate(N, bootResiduals(residuals.ols, model, x))
hist(beta.bootDist.residuals, breaks = 30)
residuals.ols = model$residuals
bootResiduals = function(residuals.ols, model.ols, x) {
bootIdx = sample(n, replace = TRUE)
bootSampleResiduals = residuals.ols[bootIdx]
bootY = model.ols$fitted.values + bootSampleResiduals
bootBeta = lm(bootY ~ x)$coefficients[2]
return(bootBeta)
}
set.seed(151)
beta.bootDist.residuals = replicate(N, bootResiduals(residuals.ols, model, x))
hist(beta.bootDist.residuals, breaks = 30)
head(player)
library(dplyr)
lineup_14_15 = read.csv("~/Desktop/lineup_info_2014-15.csv")
lineup_15_16 = read.csv("~/Desktop/lineup_info_2015-16.csv")
lineup_16_17 = read.csv("~/Desktop/lineup_info_2016-17.csv")
pbp_14_15 = read.csv("~/Desktop/pbp_info_2014-15.csv")
player = read.csv("~/Desktop/player.csv")
schedule = read.csv("~/Desktop/schedule.csv")
team = read.csv("~/Desktop/team.csv")
head(player)
head(schedule)
head(team)
game_21401127 = pbp_14_15 %>% filter(game_id == 21401127)
nrow(pbp_14_15)
game_21401127 = pbp_14_15 %>% filter(game_id == 21401127)
nrow(pbp_14_15) + nrow(pbp_15_16) + nrow(pbp_16_17)
game_21401127 = pbp_14_15 %>% filter(game_id == 21401127)
(nrow(pbp_14_15) + nrow(pbp_15_16) + nrow(pbp_16_17))/3
game_21401127 = pbp_14_15 %>% filter(game_id == 21401127)
nrow(pbp_14_15)
nrow(pbp_15_16)
nrow(pbp_16_17)
head(pbp_14_15)
head(pbp_15_16)
game_21401127 = pbp_14_15 %>% filter(game_id == 21401127)
head(pbp_14_15)
View(pbp_14_15)
summary(pbp_14_15['game_clock'])
typeof(pbp_14_15['game_clock'])
typeof(pbp_14_15['game_clock'][0])
typeof(pbp_14_15['game_clock'])
begin = '12:00'
as.numeric(as.POSIXct(begin))
begin = '12:00'
as.numeric(begin)
begin = '12:00'
strptime(begin, format = '%M:$S')
begin = '12:00'
as.POSIXct(begin, format = '%M:%S')
begin = '12:00'
as.numeric(as.POSIXct(begin, format = '%M:%S'))
begin = '11:30'
as.numeric(as.POSIXct(begin, format = '%M:%S'))
begin = '12:00'
end = '11:30'
as.numeric(as.POSIXct(begin, format = '%M:%S')) - as.numeric(as.POSIXct(end, format = '%M:%S'))
begin = '12:00'
end = '00:00'
as.numeric(as.POSIXct(begin, format = '%M:%S')) - as.numeric(as.POSIXct(end, format = '%M:%S'))
begin = '12:00'
end = '00:00'
(as.numeric(as.POSIXct(begin, format = '%M:%S')) - as.numeric(as.POSIXct(end, format = '%M:%S')))/60
begin = '12:00'
end = '00:00'
(as.numeric(as.POSIXct(begin, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
begin = '11:53'
(as.numeric(as.POSIXct(begin, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
e
exp(1)
i
library(dplyr)
lineup_14_15 = read.csv("~/Desktop/lineup_info_2014-15.csv")
lineup_15_16 = read.csv("~/Desktop/lineup_info_2015-16.csv")
lineup_16_17 = read.csv("~/Desktop/lineup_info_2016-17.csv")
pbp_14_15 = read.csv("~/Desktop/pbp_info_2014-15.csv")
pbp_15_16 = read.csv("~/Desktop/pbp_info_2015-16.csv")
pbp_16_17 = read.csv("~/Desktop/pbp_info_2016-17.csv")
player = read.csv("~/Desktop/player.csv")
schedule = read.csv("~/Desktop/schedule.csv")
team = read.csv("~/Desktop/team.csv")
head(player)
head(schedule)
head(team)
#setwd('C:/Users/Rahul/Dev/School/kings_case_comp')
data <- read.csv('./data/pbp_info_2015-16.csv')
head(data)
# returns the confidence with which a player should be subbed out (0 to 1)
sub_out_player <- function(game_clock, period, fouls, player_skill, win_prob=.5){
foul_trouble <- foul_trouble(game_clock, period, fouls)
return (1)
}
# returns how much foul trouble a player is in (0 to 1) based on current game conditions
foul_trouble <- function(game_clock, period, fouls) {
game_clock_as_int <- (as.numeric(as.POSIXct(game_clock, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
time_remaining <- (4-period) * 12 + game_clock_as_int
foul_trouble_data <- read.csv('./foul_trouble_data.csv')
foul_trouble_model <- lm(X0.1 ~ X45 + X1, data=foul_trouble_data)
intercept <- foul_trouble_model$coefficients[1]
time_coefficient <- foul_trouble_model$coefficients[2]
foul_coefficient <- foul_trouble_model$coefficients[3]
val <- intercept + (time_coefficient * time_remaining) + (foul_coefficient * fouls)
min_val <- intercept
max_val <- intercept + (time_coefficient * 48) + (foul_coefficient * 5)
return ((val - min_val) / (max_val - min_val))
}
foul_trouble('0:00', 4, 0)
foul_trouble('12:00', 1, 5)
foul_trouble('3:00', 2, 4)
data <- read.csv('~/Desktop/kings_case_comp/data/pbp_info_2015-16.csv')
data <- read.csv('~/Desktop/kings_case_comp/data/pbp_info_2015-16.csv')
head(data)
# returns the confidence with which a player should be subbed out (0 to 1)
sub_out_player <- function(game_clock, period, fouls, player_skill, win_prob=.5){
foul_trouble <- foul_trouble(game_clock, period, fouls)
return (1)
}
# returns how much foul trouble a player is in (0 to 1) based on current game conditions
foul_trouble <- function(game_clock, period, fouls) {
game_clock_as_int <- (as.numeric(as.POSIXct(game_clock, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
time_remaining <- (4-period) * 12 + game_clock_as_int
foul_trouble_data <- read.csv('./foul_trouble_data.csv')
foul_trouble_model <- lm(X0.1 ~ X45 + X1, data=foul_trouble_data)
intercept <- foul_trouble_model$coefficients[1]
time_coefficient <- foul_trouble_model$coefficients[2]
foul_coefficient <- foul_trouble_model$coefficients[3]
val <- intercept + (time_coefficient * time_remaining) + (foul_coefficient * fouls)
min_val <- intercept
max_val <- intercept + (time_coefficient * 48) + (foul_coefficient * 5)
return ((val - min_val) / (max_val - min_val))
}
foul_trouble('0:00', 4, 0)
foul_trouble('12:00', 1, 5)
foul_trouble('3:00', 2, 4)
data <- read.csv('~/Desktop/kings_case_comp/data/pbp_info_2015-16.csv')
head(data)
# returns the confidence with which a player should be subbed out (0 to 1)
sub_out_player <- function(game_clock, period, fouls, player_skill, win_prob=.5){
foul_trouble <- foul_trouble(game_clock, period, fouls)
return (1)
}
# returns how much foul trouble a player is in (0 to 1) based on current game conditions
foul_trouble <- function(game_clock, period, fouls) {
game_clock_as_int <- (as.numeric(as.POSIXct(game_clock, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
time_remaining <- (4-period) * 12 + game_clock_as_int
foul_trouble_data <- read.csv('./foul_trouble_data.csv')
foul_trouble_model <- lm(X0.1 ~ X45 + X1, data=foul_trouble_data)
intercept <- foul_trouble_model$coefficients[1]
time_coefficient <- foul_trouble_model$coefficients[2]
foul_coefficient <- foul_trouble_model$coefficients[3]
val <- intercept + (time_coefficient * time_remaining) + (foul_coefficient * fouls)
min_val <- intercept
max_val <- intercept + (time_coefficient * 48) + (foul_coefficient * 5)
return ((val - min_val) / (max_val - min_val))
}
foul_trouble('0:00', 4, 0)
foul_trouble('12:00', 1, 5)
foul_trouble('3:00', 2, 4)
data <- read.csv('~/Desktop/kings_case_comp/data/pbp_info_2015-16.csv')
head(data)
# returns the confidence with which a player should be subbed out (0 to 1)
sub_out_player <- function(game_clock, period, fouls, player_skill, win_prob=.5){
foul_trouble <- foul_trouble(game_clock, period, fouls)
return (1)
}
# returns how much foul trouble a player is in (0 to 1) based on current game conditions
foul_trouble <- function(game_clock, period, fouls) {
game_clock_as_int <- (as.numeric(as.POSIXct(game_clock, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
time_remaining <- (4-period) * 12 + game_clock_as_int
foul_trouble_data <- read.csv('./foul_trouble_data.csv')
foul_trouble_model <- lm(X0.1 ~ X45 + X1, data=foul_trouble_data)
intercept <- foul_trouble_model$coefficients[1]
time_coefficient <- foul_trouble_model$coefficients[2]
foul_coefficient <- foul_trouble_model$coefficients[3]
val <- intercept + (time_coefficient * time_remaining) + (foul_coefficient * fouls)
min_val <- intercept
max_val <- intercept + (time_coefficient * 48) + (foul_coefficient * 5)
return ((val - min_val) / (max_val - min_val))
}
foul_trouble('0:00', 4, 0)
foul_trouble('12:00', 1, 5)
foul_trouble('3:00', 2, 4)
#setwd('C:/Users/Rahul/Dev/School/kings_case_comp')
setwd('~/Desktop/kings_case_comp/')
data <- read.csv('./data/pbp_info_2015-16.csv')
head(data)
# returns the confidence with which a player should be subbed out (0 to 1)
sub_out_player <- function(game_clock, period, fouls, player_skill, win_prob=.5){
foul_trouble <- foul_trouble(game_clock, period, fouls)
return (1)
}
# returns how much foul trouble a player is in (0 to 1) based on current game conditions
foul_trouble <- function(game_clock, period, fouls) {
game_clock_as_int <- (as.numeric(as.POSIXct(game_clock, format = '%M:%S')) - as.numeric(as.POSIXct('00:00', format = '%M:%S')))/60
time_remaining <- (4-period) * 12 + game_clock_as_int
foul_trouble_data <- read.csv('./foul_trouble_data.csv')
foul_trouble_model <- lm(X0.1 ~ X45 + X1, data=foul_trouble_data)
intercept <- foul_trouble_model$coefficients[1]
time_coefficient <- foul_trouble_model$coefficients[2]
foul_coefficient <- foul_trouble_model$coefficients[3]
val <- intercept + (time_coefficient * time_remaining) + (foul_coefficient * fouls)
min_val <- intercept
max_val <- intercept + (time_coefficient * 48) + (foul_coefficient * 5)
return ((val - min_val) / (max_val - min_val))
}
foul_trouble('0:00', 4, 0)
foul_trouble('12:00', 1, 5)
foul_trouble('3:00', 2, 4)
<<<<<<< HEAD
nrow(player)
head(player)
head(schedule)
head(team)
players_14_15 = player %>% filter(season == 2014-2015)
players_14_15 = player %>% filter(season == 2014-2015)
nrow(players_14_15)
typeof(player$season)
players_14_15 = player %>% filter(season == 2014-15)
nrow(players_14_15)
is.factor(player$season)
ratings_14_15 = read.csv('~/Desktop/2k_14_15.csv')
ratings_14_15 = read.csv('~/Desktop/2k_14_15.csv')
head(ratings_14_15)
players_14_15 = player %>% filter(season == 2014-15)
player = read.csv("~/Desktop/player.csv", as.is = stringsAsFactors)
players_14_15 = player %>% filter(season == 2014-15)
head(players_14_15)
players_14_15 = player %>% filter(season == '2014-15')
players_14_15 = player %>% filter(season == '2014-15')
head(players_14_15)
players_14_15 = player %>% filter(season == '2014-15')
nrow(players_14_15)
View(players_14_15)
ratings_14_15 = read.csv('~/Desktop/2k_14_15.csv')
nrow(ratings_14_15)
ratings_14_15 = read.csv('~/Desktop/2k_14_15.csv')
head(ratings_14_15)
players_14_15 = player %>% filter(season == '2014-15')
head(players_14_15)
View(ratings_14_15)
library(dplyr)
library(tidyr)
player = read.csv("~/Desktop/player.csv")
player = read.csv("./data/player.csv")
player = read.csv("./data/player.csv")
player = read.csv("./data/player.csv")
setwd('~/Desktop/kings_case_comp/')
library(dplyr)
library(tidyr)
player = read.csv("./data/player.csv")
setwd('~/Desktop/kings_case_comp/')
library(dplyr)
library(tidyr)
lineup_14_15 = read.csv("./data/lineup_info_2014-15.csv")
=======
<<<<<<< HEAD
#setwd('C:/Users/Rahul/Dev/School/kings_case_comp')
data <- read.csv('./data/pbp_info_2015-16.csv')
head(data)
# returns the confidence with which a player should be subbed out (0 to 1)
sub_out_player <- function(game_clock, period, fouls, player_skill, win_prob=.5){
foul_trouble <- foul_trouble(game_clock, period, fouls)
return (1)
}
#setwd('C:/Users/Rahul/Dev/School/kings_case_comp')
data <- read.csv('./data/pbp_info_2015-16.csv')
foul_trouble('3:00', 2, 4)
foul_trouble('12:00', 1, 5)
raw_data <- read_archive('stringr')
tbl_html <- readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr')
tbl_html
---
#Reading the archive of stringr
library('stringer')
---
#Reading the archive of stringr
library('stringr')
tbl_html <- readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr')
---
#Reading the archive of stringr
download.packages("XML")
---
#Reading the archive of stringr
install.packages("XML")
tbl_html <- readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr')
tbl_html
library(XML)
tbl_html <- readHTMLTable('http://cran.r-project.org/src/contrib/Archive/stringr')
tbl_html
read_archive <- function(archived_function){
readHTMLTable(paste0('http://cran.r-project.org/src/contrib/Archive/', archived_function))
}
raw_data <- read_archive('stringr')
table(raw_data)
raw_data
raw_data$name
raw_data$Name
data.table(raw_data)
as.data.table(raw_data)
as.data.frame(raw_data)
a <- as.data.frame(raw_data)
clean_archive <- function(raw_data){
raw_table <- as.data.frame(raw_data)
raw_table <- raw_table[c(1:4)]
raw_table
}
clean_archive <- function(raw_data){
raw_table <- as.data.frame(raw_data)
raw_table <- raw_table[c(1:4)]
raw_table
}
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
clean_data
clean_archive <- function(raw_data){
raw_table <- as.data.frame(raw_data)
raw_table <- raw_table[c(1:4)]
raw_table$name <- str_split(raw_table[1], pattern = '_')[1]
}
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
clean_data
clean_archive <- function(raw_data){
raw_table <- as.data.frame(raw_data)
raw_table <- raw_table[c(1:4)]
#raw_table$name <- str_split(raw_table[1], pattern = '_')[1]
}
raw_data <- read_archive('stringr')
clean_data <- clean_archive(raw_data)
clean_data
str_split(clean_data[1], pattern = '_')[1]
str_split(clean_data[1], pattern = '_')
clean_data[1]
clean_data
clean_data[2]
str_split(clean_data[2], pattern = '_')
?str_split
str_split(clean_data[2], pattern = '_')
raw_data
str_split(clean_data[2], pattern = '_')
?str_split
clean_data[3]
clean_data[4]
is_character(clean_data[4])
is.character(clean_data[4])
typeof(clean_data[2])
is.character(clean_data[4][3])
clean_data[4]
clean_data[4][3]
clean_data[4,3]
clean_data[4, 4]
type_of(clean_data[4])
type.of(clean_data[4])
type(clean_data[4])
typeof(clean_data[4])
unlist(clean_data[4])
typeof(unlist(clean_data[4]))
typeof(clean_data[2])
typeof(unlist(clean_data[2]))
unlist(clean_data[2])
clean_data
toString(unlist(clean_data[2]))
unlist(clean_data[2])
toString(unlist(clean_data[2]))[1]
toString(unlist(clean_data[2]))[2]
toString(unlist(clean_data[2]))
unlist(clean_data[2])
is.character(clean_data[4])
clean_data[4]
clean_data[4][3]
clean_data[4,3]
clean_data[4]
clean_data[4][2]
clean_data[4][2]
clean_data[4
clean_data[4]
clean_data[4]
clean_data[2]
clean_data[2][3]
clean_data[2,]
clean_data[4,]
clean_data[8,]
split_chars <- function(string){
list_of_strings <- NULL
for (i in 1:length(string)){
list_of_strings = list_of_strings + substr(string, i, i+1)
}
list_of_strings
}
split_chars("Go Bears")
length("Go Bears")
length('Go Bears')
?length
nchar('go bears')
split_chars <- function(string){
list_of_strings <- NULL
for (i in 1:nchar(string)){
list_of_strings = list_of_strings + substr(string, i, i+1)
}
list_of_strings
}
split_chars("Go Bears")
1:nchar('go bears')
for(i in 1:nchar('go bears'))
return i
for(i in 1:nchar('go bears'))
{
return i
}
for(i in 1:nchar('go bears')){
return i
}
for(i in 1:nchar('go bears')){
return(i)
}
for(i in 1:nchar('go bears')){
return(i)
}
}
for(i in 1:nchar('go bears')){
print(i)
}
for(e in 1:nchar('go bears')){
print(i)
}
'go bears'[2]
substr('go bears', 3)
substr('go bears', 3, 3)
substr('go bears', 1)
substr('go bears', 1, 3)
for(e in 1:nchar('go bears')){
print(i)
}
print(e)
for(e in 1:nchar('go bears')){
print(e)
}
split_chars <- function(string){
list_of_strings <- NULL
for(i in 1:nchar(string)){
list_of_strings = list_of_strings + substr(string, i, i+1)
}
list_of_strings
}
split_chars("fjlsd")
?substr
substr("fasdfasf", 2, 3)
i = 2
substr("fasdfasf", i, i+1)
substr("fasdfasf", i, i)
split_chars <- function(string){
list_of_strings <- NULL
for(i in 1:nchar(string)){
list_of_strings = list_of_strings + substr(string, i, i)
}
list_of_strings
}
split_chars("fjlsd")
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
list_of_strings = list_of_strings + substr(string, i, i)
}
list_of_strings
}
split_chars("fjlsd")
string <- "fsadfsa"
list_of_strings <- substr(string, 1, 1)
i in 2:nchar(string)
2:nchar(string)
listt <- 'f'
listt = listt + 'd'
append(listt, 'd')
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
append(list_of_strings,substr(string, i, i))
}
list_of_strings
}
split_chars("fjlsd")
split_chars("4fjlsd")
return(list_of_strings)
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
append(list_of_strings, substr(string, i, i))
}
return(list_of_strings)
}
split_chars("4fjlsd")
listt <- 'f'
i = 2
append(listt, substr(string, 2, 2))
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
list_of_strings <- append(list_of_strings, substr(string, i, i))
}
return(list_of_strings)
}
split_chars("4fjlsd")
split_chars <- function(string){
list_of_strings <- substr(string, 1, 1)
for(i in 2:nchar(string)){
list_of_strings <- append(list_of_strings, substr(string, i, i))
}
list_of_strings
}
split_chars("4fjlsd")
?freq
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(ggplot2)
library(dplyr)
char_freqs <- table(num_chars)
=======
source('C:/Users/Rahul/Dev/School/kings_case_comp/simple_model.R', echo=TRUE)
data <- read.csv('./kings_data/pbp_info_2015-16.csv')
source('C:/Users/Rahul/Dev/School/kings_case_comp/simple_model.R', echo=TRUE)
data <- read.csv('./data/pbp_info_2015-16.csv')
>>>>>>> 6153f104dbe2d0d3377782166d7bf1990df78279
>>>>>>> c78f979da8e3d0c5c57549835c021da5ce9f17b7
